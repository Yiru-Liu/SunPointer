#include <Stepper.h>

#define BAUD_RATE 115200

#define STEPPER_SPEED 5

#define RX_PIN 4
#define TX_PIN 3

#define STEPS_PER_REVOLUTION 2038
#define COMPLETE_REVOLUTION 6170
#define IN1 5 
#define IN2 6
#define IN3 7
#define IN4 8

#define RED_PIN 9
#define GRN_PIN 10
#define BLU_PIN 11

#define DEG_TO_RAD 0.017453292519943295769236907684886

Stepper myStepper = Stepper(STEPS_PER_REVOLUTION, IN1, IN3, IN2, IN4);

//night = 32,0,255
//
//
//
//1000 K: red orange = 255,16,0
//
//1800 K: true orange = 255,96,0
//
//3300 K: yellow orange = 255,100,8
//
//
//
//6300 K: true white
//
//10000 K: bluish white

struct RGBColor {
  byte red;
  byte green;
  byte blue;
};

struct CelestialCoords {
  float ra;
  float dec;
};

// Data from http://www.vendian.org/mncharity/dir3/blackbody/UnstableURLs/bbr_color.html
const RGBColor COLOR_TEMPS[] = {
  {255,56,0},
  {255,71,0},
  {255,83,0},
  {255,93,0},
  {255,101,0},
  {255,109,0},
  {255,115,0},
  {255,121,0},
  {255,126,0},
  {255,131,0},
  {255,137,18},
  {255,142,33},
  {255,147,44},
  {255,152,54},
  {255,157,63},
  {255,161,72},
  {255,165,79},
  {255,169,87},
  {255,173,94},
  {255,177,101},
  {255,180,107},
  {255,184,114},
  {255,187,120},
  {255,190,126},
  {255,193,132},
  {255,196,137},
  {255,199,143},
  {255,201,148},
  {255,204,153},
  {255,206,159},
  {255,209,163},
  {255,211,168},
  {255,213,173},
  {255,215,177},
  {255,217,182},
  {255,219,186},
  {255,221,190},
  {255,223,194},
  {255,225,198},
  {255,227,202},
  {255,228,206},
  {255,230,210},
  {255,232,213},
  {255,233,217},
  {255,235,220},
  {255,236,224},
  {255,238,227},
  {255,239,230},
  {255,240,233},
  {255,242,236},
  {255,243,239},
  {255,244,242},
  {255,245,245},
  {255,246,248},
  {255,248,251},
  {255,249,253},
  {254,249,255},
  {252,247,255},
  {249,246,255},
  {247,245,255},
  {245,243,255},
  {243,242,255},
  {240,241,255},
  {239,240,255},
  {237,239,255},
  {235,238,255},
  {233,237,255},
  {231,236,255},
  {230,235,255},
  {228,234,255},
  {227,233,255},
  {225,232,255},
  {224,231,255},
  {222,230,255},
  {221,230,255},
  {220,229,255},
  {218,228,255},
  {217,227,255},
  {216,227,255},
  {215,226,255},
  {214,225,255},
  {212,225,255},
  {211,224,255},
  {210,223,255},
  {209,223,255},
  {208,222,255},
  {207,221,255},
  {207,221,255},
  {206,220,255},
  {205,220,255},
  {204,219,255},
  {203,219,255},
  {202,218,255},
  {201,218,255},
  {201,217,255},
  {200,217,255},
  {199,216,255},
  {199,216,255},
  {198,216,255},
  {197,215,255},
  {196,215,255},
  {196,214,255},
  {195,214,255},
  {195,214,255},
  {194,213,255},
  {193,213,255},
  {193,212,255},
  {192,212,255},
  {192,212,255},
  {191,211,255},
  {191,211,255},
  {190,211,255},
  {190,210,255},
  {189,210,255},
  {189,210,255},
  {188,210,255},
  {188,209,255},
  {187,209,255},
  {187,209,255},
  {186,208,255},
  {186,208,255},
  {185,208,255},
  {185,208,255},
  {185,207,255},
  {184,207,255},
  {184,207,255},
  {183,207,255},
  {183,206,255},
  {183,206,255},
  {182,206,255},
  {182,206,255},
  {182,205,255},
  {181,205,255},
  {181,205,255},
  {181,205,255},
  {180,205,255},
  {180,204,255},
  {180,204,255},
  {179,204,255},
  {179,204,255},
  {179,204,255},
  {178,203,255},
  {178,203,255},
  {178,203,255},
  {178,203,255},
  {177,203,255},
  {177,202,255},
  {177,202,255},
  {177,202,255},
  {176,202,255},
  {176,202,255},
  {176,202,255},
  {175,201,255},
  {175,201,255},
  {175,201,255},
  {175,201,255},
  {175,201,255},
  {174,201,255},
  {174,201,255},
  {174,200,255},
  {174,200,255},
  {173,200,255},
  {173,200,255},
  {173,200,255},
  {173,200,255},
  {173,200,255},
  {172,199,255},
  {172,199,255},
  {172,199,255},
  {172,199,255},
  {172,199,255},
  {171,199,255},
  {171,199,255},
  {171,199,255},
  {171,198,255},
  {171,198,255},
  {170,198,255},
  {170,198,255},
  {170,198,255},
  {170,198,255},
  {170,198,255},
  {170,198,255},
  {169,198,255},
  {169,197,255},
  {169,197,255},
  {169,197,255},
  {169,197,255},
  {169,197,255},
  {169,197,255},
  {168,197,255},
  {168,197,255},
  {168,197,255},
  {168,197,255},
  {168,196,255},
  {168,196,255},
  {168,196,255},
  {167,196,255},
  {167,196,255},
  {167,196,255},
  {167,196,255},
  {167,196,255},
  {167,196,255},
  {167,196,255},
  {166,196,255},
  {166,195,255},
  {166,195,255},
  {166,195,255},
  {166,195,255},
  {166,195,255},
  {166,195,255},
  {166,195,255},
  {165,195,255},
  {165,195,255},
  {165,195,255},
  {165,195,255},
  {165,195,255},
  {165,195,255},
  {165,194,255},
  {165,194,255},
  {165,194,255},
  {164,194,255},
  {164,194,255},
  {164,194,255},
  {164,194,255},
  {164,194,255},
  {164,194,255},
  {164,194,255},
  {164,194,255},
  {164,194,255},
  {164,194,255},
  {163,194,255},
  {163,194,255},
  {163,193,255},
  {163,193,255},
  {163,193,255},
  {163,193,255},
  {163,193,255},
  {163,193,255},
  {163,193,255},
  {163,193,255},
  {163,193,255},
  {162,193,255},
  {162,193,255},
  {162,193,255},
  {162,193,255},
  {162,193,255},
  {162,193,255},
  {162,193,255},
  {162,193,255},
  {162,192,255},
  {162,192,255},
  {162,192,255},
  {162,192,255},
  {162,192,255},
  {161,192,255},
  {161,192,255},
  {161,192,255},
  {161,192,255},
  {161,192,255},
  {161,192,255},
  {161,192,255},
  {161,192,255},
  {161,192,255},
  {161,192,255},
  {161,192,255},
  {161,192,255},
  {161,192,255},
  {161,192,255},
  {160,192,255},
  {160,192,255},
  {160,191,255},
  {160,191,255},
  {160,191,255},
  {160,191,255},
  {160,191,255},
  {160,191,255},
  {160,191,255},
  {160,191,255},
  {160,191,255},
  {160,191,255},
  {160,191,255},
  {160,191,255},
  {160,191,255},
  {159,191,255},
  {159,191,255},
  {159,191,255},
  {159,191,255},
  {159,191,255},
  {159,191,255},
  {159,191,255},
  {159,191,255},
  {159,191,255},
  {159,191,255},
  {159,191,255},
  {159,190,255},
  {159,190,255},
  {159,190,255},
  {159,190,255},
  {159,190,255},
  {159,190,255},
  {159,190,255},
  {158,190,255},
  {158,190,255},
  {158,190,255},
  {158,190,255},
  {158,190,255},
  {158,190,255},
  {158,190,255},
  {158,190,255},
  {158,190,255},
  {158,190,255},
  {158,190,255},
  {158,190,255},
  {158,190,255},
  {158,190,255},
  {158,190,255},
  {158,190,255},
  {158,190,255},
  {158,190,255},
  {158,190,255},
  {158,190,255},
  {158,190,255},
  {157,190,255},
  {157,190,255},
  {157,189,255},
  {157,189,255},
  {157,189,255},
  {157,189,255},
  {157,189,255},
  {157,189,255},
  {157,189,255},
  {157,189,255},
  {157,189,255},
  {157,189,255},
  {157,189,255},
  {157,189,255},
  {157,189,255},
  {157,189,255},
  {157,189,255},
  {157,189,255},
  {157,189,255},
  {157,189,255},
  {157,189,255},
  {157,189,255},
  {157,189,255},
  {157,189,255},
  {156,189,255},
  {156,189,255},
  {156,189,255},
  {156,189,255},
  {156,189,255},
  {156,189,255},
  {156,189,255},
  {156,189,255},
  {156,189,255},
  {156,189,255},
  {156,189,255},
  {156,189,255},
  {156,189,255},
  {156,189,255},
  {156,189,255},
  {156,189,255},
  {156,188,255},
  {156,188,255},
  {156,188,255},
  {156,188,255},
  {156,188,255},
  {156,188,255},
  {156,188,255},
  {156,188,255},
  {156,188,255},
  {156,188,255},
  {156,188,255},
  {156,188,255},
  {155,188,255},
  {155,188,255},
  {155,188,255},
  {155,188,255},
  {155,188,255},
  {155,188,255},
  {155,188,255},
  {155,188,255},
  {155,188,255},
  {155,188,255},
  {155,188,255},
  {155,188,255},
  {155,188,255},
  {155,188,255},
  {155,188,255},
  {155,188,255},
  {155,188,255}
};

constexpr size_t COLOR_TEMPS_SIZE = sizeof(COLOR_TEMPS) / sizeof(COLOR_TEMPS[0]);

RGBColor tempToRGB(int temp) {
  int index = (temp - 1000) / 100;
  if (index < 0) {
    index = 0;
  } else if (index >= COLOR_TEMPS_SIZE) {
    index = COLOR_TEMPS_SIZE - 1;
  }

  return COLOR_TEMPS[index];
}

float toJdSince2000(int year, byte month, byte day, byte hour, byte minute, byte second) {
  // Algorithm from https://aa.usno.navy.mil/faq/JD_formula
  return (367 * year - (7*(year + (month + 9)/12))/4 + (275*month)/9 + day) - 730531.5
    + (hour + minute*60 + second*3600)/86400.0;
}

CelestialCoords calculateSun(float jdSince2000) {
  // Algorithm from https://aa.usno.navy.mil/faq/sun_approx
  float g = fmod(357.529 + 0.98560028 * jdSince2000, 360) * DEG_TO_RAD;
  float q = fmod(280.459 + 0.98564736 * jdSince2000, 360) * DEG_TO_RAD;
  float l = q + ((1.915 * sin(g) + 0.020 * sin(2*g)) * DEG_TO_RAD);
  float e = (23.439 - 0.00000036 * jdSince2000) * DEG_TO_RAD;
  float ra = atan2(cos(e) * sin(l), cos(l));
  float d = asin(sin(e) * sin(l));
  CelestialCoords c = {ra, d};
  return c;
}

// Elevation to temperature (K): [elevation (radians)] * 5729.5779513082320876798154814105 + 1000

void writeColor(RGBColor color) {
  analogWrite(RED_PIN, color.red);
  analogWrite(GRN_PIN, color.green / 3);
  analogWrite(BLU_PIN, color.blue / 3);
}

void setup() {
  pinMode(RED_PIN, OUTPUT);
  pinMode(GRN_PIN, OUTPUT);
  pinMode(BLU_PIN, OUTPUT);

  Serial.begin(BAUD_RATE);
  Serial.println("Serial ready.");

	myStepper.setSpeed(STEPPER_SPEED);
}

void makeSteps(int numSteps) {
  myStepper.step(numSteps);
}

/* Commands:
 * A[x] - Advance stepper motor by [x] steps
 * X[hex code] - Sets the LED to the given hex code
 */
void processSerial() {
  if (Serial.available() > 0) {
    char incomingByte = Serial.read();
    if (incomingByte == 'X') {
      Serial.println("X - CHANGE COLOR");
      String strInput = Serial.readStringUntil('\n');
      if (strInput != NULL) {
        char hexCode[7] = {};
        strInput.toCharArray(hexCode, 7);
        unsigned long hexColor = strtoul(hexCode, NULL, 16);
        RGBColor rgbcolor = {
          hexColor >> 16,
          (hexColor >> 8) & 0xFF,
          hexColor & 0xFF
        };
        Serial.print("Displaying color ");
        Serial.print(rgbcolor.red);
        Serial.print(',');
        Serial.print(rgbcolor.green);
        Serial.print(',');
        Serial.print(rgbcolor.blue);
        Serial.println('.');
        writeColor(rgbcolor);
      } else {
        Serial.println("Error parsing command.");
      }
    } else if (incomingByte == 'A') {
      Serial.println("A - ADVANCE STEPPER");
      int numSteps = Serial.parseInt();
      Serial.print("Advancing ");
      Serial.print(numSteps);
      Serial.print(" steps... ");
      if (Serial.read() == '\n') {
        makeSteps(numSteps);
        Serial.println("Done.");
      } else {
        Serial.println("Error parsing command.");
      }
    } else {
      Serial.print("Unrecognized command: ");
      Serial.println(incomingByte);
      while (Serial.read() != '\n') {} // Consume the rest of the line
    }
  }
}

void loop() {
  processSerial();
  // while (Serial.available() > 0) {
  //   int temp = Serial.parseInt();
  //   if (Serial.read() == '\n') {
  //     Serial.print("Temp: ");
  //     Serial.print(temp);
  //     RGBColor currentColor = tempToRGB(temp);
  //     Serial.print("\tColor: ");
  //     Serial.print(currentColor.red);
  //     Serial.print(", ");
  //     Serial.print(currentColor.green);
  //     Serial.print(", ");
  //     Serial.println(currentColor.blue);
  //     writeColor(currentColor);
  //   }
  // }
}
